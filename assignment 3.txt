Assignment 1:
import java.util.Arrays;

public class ass1  {
    public static int ass1 (int[] nums, int target) {
        Arrays.sort(nums);
        int closestSum = nums[0] + nums[1] + nums[2];
        
        for (int i = 0; i < nums.length - 2; i++) {
            int left = i + 1;
            int right = nums.length - 1;
            
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                
                if (Math.abs(sum - target) < Math.abs(closestSum - target)) {
                    closestSum = sum;
                }
                
                if (sum < target) {
                    left++;
                } else if (sum > target) {
                    right--;
                } else {
                   
                    return sum;
                }
            }
        }
        
        return closestSum;
    }
    
    public static void main(String[] args) {
        int[] nums = {-1, 2, 1, -4};
        int target = 1;
        int result = ass1
 (nums, target);
        System.out.println("Closest sum to the target: " + result);
    }
}



Assignment 2:



import java.util.*;

public class ass2{
    public static List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length; // size of the array
        List<List<Integer>> ans = new ArrayList<>();

        // sort the given array:
        Arrays.sort(nums);

        // calculating the quadruplets:
        for (int i = 0; i < n; i++) {
            // avoid the duplicates while moving i:
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n; j++) {
                // avoid the duplicates while moving j:
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                // 2 pointers:
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(nums[l]);
                        ans.add(temp);
                        k++;
                        l--;

                        // skip the duplicates:
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target) k++;
                    else l--;
                }
            }
        }

        return ans;
    }

    public static void main(String[] args) {
        int[] nums = {1,0,-1,0,-2,2};
        int target = 0;
        List<List<Integer>> ans = fourSum(nums, target);
        System.out.println("The quadruplets are: ");
        for (List<Integer> it : ans) {
            System.out.print("[");
            for (int ele : it) {
                System.out.print(ele + " ");
            }
            System.out.print("] ");
        }
        System.out.println();
    }
}


Assignment 4:
class ass3 {
    public int searchInsert(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
       
        int index = left;
       
        
       
        
        return index;
    }
    
public static void main(String[] args) {
    int[] nums = {1, 3, 5, 6};
    int target = 5;

    ass3 solution = new ass3();
    int index = solution.searchInsert(nums, target);
    System.out.println("Index: " + index);
    
}
}


Assignment 5:
class ass4 {
    public  static int[] addOne(int[] arr) {
        int n = arr.length;
        
        
        for (int i = n - 1; i >= 0; i--) {
           
            arr[i]++;
            
           
            if (arr[i] == 10) {
                arr[i] = 0;
            } else {
                
                return arr;
            }}
        return arr;}
    public static void main (String[] args) {
        
                int[] arr = {1, 2, 3};
        
                ass4 sc= new ass4();
                int[] result = sc.addOne(arr);
                
                System.out.print("Result: ");
                for (int digit : result) {
                    System.out.print(digit+ " ");
                }
                System.out.println();
            }
        }
        

